var fs = require('fs');
var url = require('url');
var path = require('path');
var mkdirp = require('mkdirp');
var jade = require('jade');
var _ = require('underscore');
var _options = {};
var _infoCache = {};

function initialize(options) {
  _options = options;
  if(!_options.cachepath) {
    _options.cachepath = path.join(options.templatepath, '.cache');
  }
  _options.ext = _options.ext || '.html';

}
function middleware(options) {
  if(options) {
    initialize(options);
  }
  return function(req, res, next) {
    if('GET' != req.method && 'HEAD' != req.method) return next();
    var requestPath = url.parse(req.url).pathname;
    console.log('path: ' + requestPath);
    var files;
    var redirect = requestPath[requestPath.length - 1] != '/';
    var ext = path.extname(requestPath);
    if(ext && ext != _options.ext) {
      return next();
    }
    if(ext) {
      redirect = false;
    }
    var file = path.basename(requestPath, _options.ext);
    var dir = path.dirname(requestPath);
    if(file == 'index') {
      if(dir == '/') {
        file = '';
      }
    }
    if(!file) {
      files = [path.join(dir, 'index')];
    } else if(ext) {
      files = [path.join(dir, file)];
    } else {
      files = [
        path.join(dir, file),
        path.join(dir, file, 'index')
      ];
    }
    console.log('files: ' + JSON.stringify(files));
    console.log('redirect: ' + redirect);
    for(var i = 0; i < files.length; i++) {
      var htmlPath = path.join(_options.cachepath, files[i] + _options.ext);
      var jadePath = path.join(_options.templatepath, files[i] + '.jade');
      console.log("html: " + htmlPath);
      console.log("jade: " + jadePath);
      if(!fs.existsSync(jadePath)) {
        console.log('no jade, try next');
        continue;
      }
      if(redirect) {
        return res.redirect(301,requestPath+"/");
      }
      var sendHtml = function() {
        res.sendfile(htmlPath, function(err) {
          if(err) {
            return next(err);
          }
        });
      };
      var info = _infoCache[jadePath];
      if(info && fs.existsSync(htmlPath)) {
        console.log('have jade && html, check for staleness');
        var stale = false;
        if(!stale) {
          return sendHtml();
        }
      }
      console.log("no info or stale info");
      return fs.readFile(jadePath, function(err, jadeStr) {
        if(err) {
          return next(err);
        }
        var options = {
          filename: jadePath
        };
        try {
          var fn = jade.compile(jadeStr, options);
          var info = {
            fn: fn,
            files: getFileModification(fn.files)
          };
          _infoCache[jadePath] = info;
          console.log(JSON.stringify(info.files, null, 2));
          console.log('gen html');
          var html = info.fn({title: 'hi there'});
          var htmlDir = path.dirname(htmlPath);
          return mkdirp(htmlDir, 0755, function(err) {
            if(err) {
              return next(err);
            }
            return fs.writeFile(htmlPath, html, 'utf8', function(err) {
              if(err) {
                return next(err);
              }
              return sendHtml();
            });
          });
        } catch(e) {
          return next(e);
        }
      });
    }
    console.log('no jade candidate, not handled');
    return next();
  };
}

function getFileModification(files, mods) {
  mods = mods || {};
  _.each(files, function(v, k) {
    if(mods[k]) {
      return;
    }
    mods[k] = fs.statSync(k).mtime;
    getFileModification(v, mods);
  });
  return mods;
}

module.exports = {
  middleware: middleware,
  initialize: initialize
};