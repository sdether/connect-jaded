var fs = require('fs');
var url = require('url');
var path = require('path');
var mkdirp = require('mkdirp');
var jade = require('jade');
var _ = require('underscore');
var _options = {};
var _infoCache = {};

function initialize(options) {
  _options = options;
  if(!_options.cachepath) {
    _options.cachepath = path.join(options.templatepath, '.cache');
  }
}
function middleware(options) {
  if(options) {
    initialize(options);
  }
  return function(req, res, next) {
    if('GET' != req.method && 'HEAD' != req.method) return next();
    var requestPath = url.parse(req.url).pathname;
    var ext = path.extname(requestPath) || '.html';
    var file = path.basename(requestPath, '.html') || 'index';
    if(ext !== '.html') {
      return next();
    }
    var dir = path.dirname(requestPath);
    var htmlPath = path.join(_options.cachepath, dir, (file || 'index') + '.html');
    var jadePath = path.join(_options.templatepath, dir, (file || 'index') + '.jade');
    if(!fs.existsSync(jadePath)) {
      console.log('no jade, no handling')
      return next();
    }
    var info = _infoCache[jadePath];
    if(info && fs.existsSync(htmlPath)) {
      console.log('have jade && html, check for staleness');
      var stale = false;
      if(!stale) {
        return res.sendfile(htmlPath, function(err) {
          if(err) {
            return next(err);
          }
        });
      }
    }
    console.log("no info or stale info");
    return fs.readFile(jadePath, function(err, jadeStr) {
      if(err) {
        return next(err);
      }
      var options = {
        filename: jadePath
      };
      try {
        var fn = jade.compile(jadeStr, options);
        var info = {
          fn: fn,
          files: getFileModification(fn.files)
        };
        _infoCache[jadePath] = info;
        console.log(JSON.stringify(info.files, null, 2));
        console.log('gen html');
        var html = info.fn({title: 'hi there'});
        var htmlDir = path.dirname(htmlPath);
        return mkdirp(htmlDir, 0755, function(err) {
          if(err) {
            return next(err);
          }
          return fs.writeFile(htmlPath, html, 'utf8', function(err) {
            if(err) {
              return next(err);
            }
            return res.sendfile(htmlPath, function(err) {
              if(err) {
                return next(err);
              }
            });
          });
        });
      } catch(e) {
        return next(e);
      }
    });
  };
}

function getFileModification(files, mods) {
  mods = mods || {};
  _.each(files, function(v, k) {
    if(mods[k]) {
      return;
    }
    mods[k] = fs.statSync(k).mtime;
    getFileModification(v, mods);
  });
  return mods;
}

module.exports = {
  middleware: middleware,
  initialize: initialize
};